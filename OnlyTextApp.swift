//
//  OnlyTextApp.swift
//  OnlyText
//
//  Created by Larry Titus on 9/28/25.
//  Version 1.1
//

import SwiftUI
import AppKit

// Simple helper to read the marketing version (CFBundleShortVersionString).
// Update the Version in your targetâ€™s Info tab; this will reflect it automatically.
struct AppInfo {
    static var versionTag: String {
        let v = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") as? String ?? "1.0"
        return "v\(v)"
    }
}

@main
struct OnlyTextApp: App {
    @NSApplicationDelegateAdaptor(AppDelegate.self) var appDelegate

    var body: some Scene {
        MenuBarExtra("OnlyText", systemImage: "doc.on.clipboard") {
            SettingsView()
                .frame(width: 320)
            Divider()
            Button("Clean Clipboard Now") {
                PasteboardMonitor.shared.cleanClipboardIfNeeded(force: true)
            }
            Divider()
            Button("Quit") { NSApplication.shared.terminate(nil) }
                .padding(.bottom, 8)

            // Version footer
            Divider()
            HStack {
                Spacer()
                Text("OnlyText \(AppInfo.versionTag)")
                    .font(.footnote)
                    .foregroundStyle(.secondary)
                Spacer()
            }
        }
        .menuBarExtraStyle(.window)
    }
}

final class AppDelegate: NSObject, NSApplicationDelegate {
    func applicationDidFinishLaunching(_ notification: Notification) {
        // Menu-bar only
        NSApp.setActivationPolicy(.accessory)

        // Ensure default is ON at first launch so monitoring is active immediately.
        UserDefaults.standard.register(defaults: [
            "enabled": true
        ])

        // Start monitoring and perform an initial clean so it works right away
        // even if the clipboard already contains rich text when the app launches.
        PasteboardMonitor.shared.start()
        PasteboardMonitor.shared.cleanClipboardIfNeeded(force: false)
    }
}

/// Minimal settings: only enable/disable the "plain text by default" behavior.
struct SettingsView: View {
    @AppStorage("enabled") private var enabled = true

    var body: some View {
        VStack(alignment: .leading, spacing: 14) {
            Toggle("Enable Plain-Text by Default", isOn: $enabled)
                .toggleStyle(.switch)
                .font(.headline)

            GroupBox("About") {
                Text("When enabled, copied rich text (RTF/HTML) is automatically converted to plain text on the clipboard. Images/files are left alone. Items marked as Transient/Concealed (e.g., from password managers) are ignored.")
                    .font(.footnote)
                    .foregroundStyle(.secondary)
            }
        }
        .padding(16)
    }
}

/// Watches the pasteboard and ensures text is plain when enabled.
final class PasteboardMonitor {
    static let shared = PasteboardMonitor()

    private let pb = NSPasteboard.general
    private var changeCount: Int = NSPasteboard.general.changeCount
    private var timer: Timer?

    // Pasteboard type hints to skip sensitive/temporary items
    private let transientType = NSPasteboard.PasteboardType("org.nspasteboard.TransientType")
    private let concealedType = NSPasteboard.PasteboardType("org.nspasteboard.ConcealedType")
    private let autoGeneratedType = NSPasteboard.PasteboardType("org.nspasteboard.AutoGeneratedType")

    private init() {}

    func start() {
        timer?.invalidate()
        timer = Timer.scheduledTimer(withTimeInterval: 0.25, repeats: true) { [weak self] _ in
            self?.check()
        }
        if let timer { RunLoop.current.add(timer, forMode: .common) }
    }

    private func check() {
        guard UserDefaults.standard.bool(forKey: "enabled") else { return }
        let currentChange = pb.changeCount
        if currentChange != changeCount {
            changeCount = currentChange
            cleanClipboardIfNeeded(force: false)
        }
    }

    /// Convert any rich text currently on the clipboard to plain text.
    func cleanClipboardIfNeeded(force: Bool) {
        // Skip password manager / transient clipboard items
        if pb.types?.contains(where: { $0 == transientType || $0 == concealedType || $0 == autoGeneratedType }) == true, !force {
            return
        }

        guard let items = pb.pasteboardItems, !items.isEmpty else { return }

        // If any item contains RTF/HTML, convert to plain and replace clipboard.
        for item in items {
            if let plain = extractPlainText(from: item) {
                pb.clearContents()
                pb.setString(plain, forType: .string)
                // Update our reference so we don't immediately reprocess.
                changeCount = pb.changeCount
                return
            }
        }
    }

    /// Returns plain text if the item represents rich text; otherwise nil to leave clipboard as-is.
    private func extractPlainText(from item: NSPasteboardItem) -> String? {
        // Prefer decoding RTF/HTML; if only a plain string exists, we don't need to change it.
        if let rtfData = item.data(forType: .rtf),
           let attr = try? NSAttributedString(data: rtfData,
                                              options: [.documentType: NSAttributedString.DocumentType.rtf],
                                              documentAttributes: nil) {
            return attr.string
        }
        if let htmlData = item.data(forType: .html),
           let attr = try? NSAttributedString(data: htmlData,
                                              options: [.documentType: NSAttributedString.DocumentType.html],
                                              documentAttributes: nil) {
            return attr.string
        }
        // Already plain string? Nothing to do.
        if item.string(forType: .string) != nil { return nil }
        return nil
    }
}

